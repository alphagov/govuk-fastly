backend F_origin {
    .connect_timeout = 5s;
    .dynamic = true;
    .port = "${origin_port}";
    .host = "${origin_hostname}";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;

    .ssl = true;
    .ssl_check_cert = always;
    .min_tls_version = "${minimum_tls_version}";
    .ssl_ciphers = "${ssl_ciphers}";
    .ssl_cert_hostname = "${origin_hostname}";
    .ssl_sni_hostname = "${origin_hostname}";

%{ if probe != null ~}
    .probe = {
        .dummy = ${probe_dns_only};
        .request =
            "HEAD ${probe} HTTP/1.1"
            "Host: ${origin_hostname}"
            "User-Agent: Fastly healthcheck (Git commit: ${git_hash})"
            "Rate-Limit-Token: ${rate_limit_token}"
%{ if basic_authentication != null ~}
            "Authorization: Basic ${basic_authentication}"
%{ endif ~}
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = ${probe_interval};
    }
%{ endif ~}
}

%{ if contains(["staging", "production"], environment) }
# Mirror backend for S3
backend F_mirrorS3 {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "${s3_mirror_port}";
    .host = "${s3_mirror_hostname}";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;

    .ssl = true;
    .ssl_check_cert = always;
    .min_tls_version = "${minimum_tls_version}";
    .ssl_ciphers = "${ssl_ciphers}";
    .ssl_cert_hostname = "${s3_mirror_hostname}";
    .ssl_sni_hostname = "${s3_mirror_hostname}";

    .probe = {
        .dummy = ${probe_dns_only};
        .request =
            "HEAD ${s3_mirror_probe} HTTP/1.1"
            "Host: ${s3_mirror_hostname}"
            "User-Agent: Fastly healthcheck (Git commit: ${git_hash})"
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = ${probe_interval};
    }
}

# Mirror backend for S3 replica
backend F_mirrorS3Replica {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "${s3_mirror_replica_port}";
    .host = "${s3_mirror_replica_hostname}";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;

    .ssl = true;
    .ssl_check_cert = always;
    .min_tls_version = "${minimum_tls_version}";
    .ssl_ciphers = "${ssl_ciphers}";
    .ssl_cert_hostname = "${s3_mirror_replica_hostname}";
    .ssl_sni_hostname = "${s3_mirror_replica_hostname}";

    .probe = {
        .dummy = ${probe_dns_only};
        .request =
            "HEAD ${s3_mirror_replica_probe} HTTP/1.1"
            "Host: ${s3_mirror_replica_hostname}"
            "User-Agent: Fastly healthcheck (Git commit: ${git_hash})"
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 200;
        .interval = ${probe_interval};
    }
}

# Mirror backend for GCS
backend F_mirrorGCS {
    .connect_timeout = 1s;
    .dynamic = true;
    .port = "${gcs_mirror_port}";
    .host = "${gcs_mirror_hostname}";
    .first_byte_timeout = 15s;
    .max_connections = 200;
    .between_bytes_timeout = 10s;

    .ssl = true;
    .ssl_check_cert = always;
    .min_tls_version = "${minimum_tls_version}";
    .ssl_ciphers = "${ssl_ciphers}";
    .ssl_cert_hostname = "${gcs_mirror_hostname}";
    .ssl_sni_hostname = "${gcs_mirror_hostname}";

    .probe = {
        .dummy = ${probe_dns_only};
        .request =
            "HEAD ${gcs_mirror_probe} HTTP/1.1"
            "Host: ${gcs_mirror_hostname}"
            "User-Agent: Fastly healthcheck (Git commit: ${git_hash})"
            "Connection: close";
        .threshold = 1;
        .window = 2;
        .timeout = 5s;
        .initial = 1;
        .expected_response = 403;
        .interval = ${probe_interval};
    }
}
%{ endif }

acl purge_ip_allowlist {
%{ if environment == "integration" ~}
  "34.248.229.46";  # AWS Integration NAT gateways
  "34.248.44.175";
  "52.51.97.232";
  "18.203.77.149";  # EKS Integration NAT gateways
  "52.212.155.150";
  "18.202.190.16";
%{ endif ~}
%{ if environment == "staging" ~}
  "18.203.108.248";  # AWS Staging NAT gateways
  "18.202.183.143";
  "18.203.90.80";
  "54.246.115.159";  # EKS Staging NAT gateways
  "54.220.171.242";
  "54.228.115.164";
%{ endif ~}
%{ if environment == "production" ~}
  "18.202.136.43";   # AWS Production NAT gateways
  "34.246.209.74";
  "34.253.57.8";
  "63.33.241.191";   # EKS Production NAT gateways
  "52.208.193.230";
  "54.220.6.200";
%{ endif ~}
}

sub vcl_recv {
  ${indent(2, file("${module_path}/../shared/_boundary_headers.vcl.tftpl"))}

  # Enable real time logging of JA3 signatures for future analysis
  if (fastly.ff.visits_this_service == 0 && req.restarts == 0) {
    set req.http.Client-JA3 = tls.client.ja3_md5;
  }

  # Require authentication for FASTLYPURGE requests unless from IP in ACL
  if (req.request == "FASTLYPURGE" && client.ip !~ purge_ip_allowlist) {
    set req.http.Fastly-Purge-Requires-Auth = "1";
  }

  # Reset proxy headers at the boundary to our network.
  unset req.http.Client-IP;
  set req.http.X-Forwarded-For = req.http.Fastly-Client-IP;
  set req.http.X-Forwarded-Host = req.http.host;

  # Check whether the remote IP address is in the list of blocked IPs
  if (table.lookup(ip_address_denylist, client.ip)) {
    error 403 "Forbidden";
  }

  # Block requests that match a known bad signature
  if (req.restarts == 0 && fastly.ff.visits_this_service == 0) {
    if (table.lookup(ja3_signature_denylist, req.http.Client-JA3, "false") == "true") {
      error 403 "Forbidden";
    }
  }
  %{ if basic_authentication != null }
  if (! (client.ip ~ allowed_ip_addresses)) {
    # Check whether the basic auth credentials are correct in integration
    if (req.http.Authorization != "Basic ${basic_authentication}") {
      error 401 "Unauthorized";
    }
  }
  %{ endif ~}
  # Force SSL.
  if (!req.http.Fastly-SSL) {
     error 801 "Force SSL";
  }

  ${indent(2, file("${module_path}/../shared/_security_txt_request.vcl"))}

  # Serve from stale for 24 hours if origin is sick
  set req.grace = 24h;

  # Default backend.
  set req.backend = F_origin;
  set req.http.Fastly-Backend-Name = "origin";

  %{ if contains(["staging", "production"], environment) ~}

  # Save original request url because req.url changes after restarts.
  if (req.restarts < 1) {
    set req.http.original-url = req.url;
  }

  # Common config when failover to mirror buckets
  if (req.restarts > 0) {
    set req.url = req.http.original-url;

    # Don't serve from stale for mirrors
    set req.grace = 0s;
    set req.http.Fastly-Failover = "1";

    # Replace multiple /
    set req.url = regsuball(req.url, "([^:])//+", "\1/");
  }

  # Failover to primary s3 mirror.
  if (req.restarts == 1) {
      set req.backend = F_mirrorS3;
      set req.http.host = "${s3_mirror_hostname}";
      set req.http.Fastly-Backend-Name = "mirrorS3";

      # Add bucket directory prefix to all the requests
      set req.url = "/${s3_mirror_prefix}" req.url;
  }

  # Failover to replica s3 mirror.
  if (req.restarts == 2) {
    set req.backend = F_mirrorS3Replica;
    set req.http.host = "${s3_mirror_replica_hostname}";
    set req.http.Fastly-Backend-Name = "mirrorS3Replica";

    # Add bucket directory prefix to all the requests
    set req.url = "/${s3_mirror_replica_prefix}" req.url;
  }

  # Failover to GCS mirror.
  if (req.restarts > 2) {
    set req.backend = F_mirrorGCS;
    set req.http.host = "${gcs_mirror_hostname}";
    set req.http.Fastly-Backend-Name = "mirrorGCS";

    # Add bucket directory prefix to all the requests
    set req.url = "/${gcs_mirror_prefix}" req.url;

    set req.http.Date = now;
    set req.http.Authorization = "AWS ${gcs_mirror_access_id}:" digest.hmac_sha1_base64("${gcs_mirror_secret_key}", "GET" LF LF LF now LF "/${gcs_mirror_bucket_name}" req.url.path);
  }
  %{ endif ~}

#FASTLY recv

  if (req.request != "HEAD" && req.request != "GET" && req.request != "FASTLYPURGE") {
    return(pass);
  }

  return(lookup);
}

sub vcl_fetch {
#FASTLY fetch

  set beresp.http.Fastly-Backend-Name = req.http.Fastly-Backend-Name;

  if ((beresp.status >= 500 && beresp.status <= 599) && req.restarts < 3 && (req.request == "GET" || req.request == "HEAD") && !beresp.http.No-Fallback) {
    set beresp.saintmode = 5s;
    return (restart);
  }

  if (req.restarts == 0) {
    # Keep stale for origin
    set beresp.grace = 24h;
  }

  if(req.restarts > 0 ) {
    set beresp.http.Fastly-Restarts = req.restarts;
  }

  if (beresp.http.Cache-Control ~ "private") {
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "max-age=0") {
    return (pass);
  }

  if (beresp.http.Cache-Control ~ "no-(store|cache)") {
    return (pass);
  }

  if (beresp.status >= 500 && beresp.status <= 599) {
    set beresp.ttl = 1s;
    set beresp.grace = 5s;
    if (beresp.http.Fastly-Backend-Name ~ "mirrorS3") {
      error 503 "Error page";
    }
    return (deliver);
  }

  if (beresp.http.Expires || beresp.http.Surrogate-Control ~ "max-age" || beresp.http.Cache-Control ~"(s-maxage|max-age)") {
    # keep the ttl here
  } else {
    # apply the default ttl
    set beresp.ttl = ${default_ttl}s;
    # S3 does not set cache headers by default. Override TTL and add cache-control with 15 minutes
    if (beresp.http.Fastly-Backend-Name ~ "mirrorS3") {
      set beresp.ttl = 900s;
      set beresp.http.Cache-Control = "max-age=900";
    }
  }

  # Override default.vcl behaviour of return(pass).
  if (beresp.http.Set-Cookie) {
    return (deliver);
  }
}

sub vcl_hit {
#FASTLY hit
}

sub vcl_miss {
#FASTLY miss
}

sub vcl_deliver {
#FASTLY deliver
}

sub vcl_error {
  if (obj.status == 801) {
    set obj.status = 301;
    set obj.response = "Moved Permanently";
    set obj.http.Location = "https://" req.http.host req.url;
    synthetic {""};
    return (deliver);
  }

  ${indent(2, file("${module_path}/../shared/_security_txt_response.vcl"))}

  # Serve stale from error subroutine as recommended in:
  # https://docs.fastly.com/guides/performance-tuning/serving-stale-content
  # The use of `req.restarts == 0` condition is to enforce the restriction
  # of serving stale only when the backend is the origin.
  if ((req.restarts == 0) && (obj.status >= 500 && obj.status < 600)) {
    /* deliver stale object if it is available */
    if (stale.exists) {
      return(deliver_stale);
    }
  }

  # Assume we've hit vcl_error() because the backend is unavailable
  # for the first two retries. By restarting, vcl_recv() will try
  # serving from stale before failing over to the mirrors.
  if (req.restarts < 3) {
    return (restart);
  }

  synthetic {"
    <!DOCTYPE html>
    <html>
      <head>
        <title>Welcome to Find open data - data.gov.uk</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 0; }
          header { background: black; }
          h1 { color: white; font-size: 29px; margin: 0 auto; padding: 10px; max-width: 990px; }
          p { color: black; margin: 30px auto; max-width: 990px; }
        </style>
      </head>
      <body>
        <header><h1>Find open data - data.gov.uk</h1></header>
        <p>We're experiencing technical difficulties. Please try again later.</p>
      </body>
    </html>"};

  return (deliver);

#FASTLY error
}

sub vcl_pass {
#FASTLY pass
}

sub vcl_hash {
#FASTLY hash
}